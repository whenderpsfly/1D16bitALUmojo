module adderMul (
    input alufn[6], //ALUFN0-5
    input a[16],
    input b[16],
    output z,
    output v,
    output n,
    output out[16] //output sum 16 bits
  ) {
    
  sig temp[16];
  multiply multi;

  always {
  
    multi.a = a[15:0];
    multi.b = b[15:0];
  
    case (alufn[1:0]){
      //000000 addition
      b00:
        temp = a + b;
        v = (a[15]&b[15]&(~temp[15]))|((~a[15])&(~b[15])&temp[15]);
      //000001 subtraction
      b01:
        temp = a - b;
        v = (a[15]&(~b[15])&(~temp[15]))|((~a[15])&(b[15])&temp[15]);
      //000010 multiplication
      b10:
        temp = multi.mul;
        v = (a[15]&b[15]&(~temp[15]))|((~a[15])&(~b[15])&temp[15]);
      //000011 modulo
      b11:
        temp = a-(a/b*b);
        v = (a[15]&b[15]&(~temp[15]))|((~a[15])&(~b[15])&temp[15]);
      //default 000000
      default:
        temp = a + b;
        v = (a[15]&b[15]&(~temp[15]))|((~a[15])&(~b[15])&temp[15]);
    }
    
    z = ~|temp;
    n = temp[15];
    out = temp;
    
  }
}
